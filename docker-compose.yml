version: '3.8'

services:
  # app:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   container_name: agent_qc_app
  #   ports:
  #     - "3300:3300"
  #   environment:
  #     - NODE_ENV=local
  #     - REDIS_HOST=redis
  #     - REDIS_PORT=6379
  #     - DATABASE_HOST=postgres
  #     - DATABASE_PORT=5432
  #     - RABBITMQ_HOST=rabbitmq
  #     - RABBITMQ_PORT=5672
  #     - RABBITMQ_USER=${RABBITMQ_USER:-rabbitmq}
  #     - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD:-rabbitmq}
  #     - MINIO_ENDPOINT=minio
  #     - MINIO_PORT=9000
  #     - MINIO_USE_SSL=false
  #     - MINIO_ROOT_USER=minioadmin
  #     - MINIO_ROOT_PASSWORD=minioadmin
  #   volumes:
  #     - .:/app
  #     - /app/node_modules
  #   depends_on:
  #     redis:
  #       condition: service_healthy
  #     postgres:
  #       condition: service_healthy
  #     rabbitmq:
  #       condition: service_healthy
  #     minio:
  #       condition: service_healthy
  #   networks:
  #     - agent_qc_network

  audio-converter:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: agent_qc_audio_converter
    command: npm run worker:audio-converter
    environment:
      - NODE_ENV=local
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=${RABBITMQ_USER:-rabbitmq}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD:-rabbitmq}
      - MINIO_BUCKET_RAW_AUDIO=${MINIO_BUCKET_RAW_AUDIO:-agent-qc-raw-audio}
      - MINIO_BUCKET_PROCESSED_AUDIO=${MINIO_BUCKET_PROCESSED_AUDIO:-agent-qc-processed-audio}
      - MINIO_ENDPOINT=minio
      - MINIO_PORT=9000
      - MINIO_USE_SSL=false
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      rabbitmq:
        condition: service_healthy
      # minio:
      #   condition: service_healthy
    networks:
      - agent_qc_network

  # audio-transcriber:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   container_name: agent_qc_audio_transcriber
  #   command: npm run worker:audio-transcriber
  #   environment:
  #     - NODE_ENV=local
  #     - RABBITMQ_HOST=rabbitmq
  #     - RABBITMQ_PORT=5672
  #     - RABBITMQ_USER=${RABBITMQ_USER:-rabbitmq}
  #     - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD:-rabbitmq}
  #     - MINIO_ENDPOINT=minio
  #     - MINIO_PORT=9000
  #     - MINIO_USE_SSL=false
  #     - MINIO_ROOT_USER=minioadmin
  #     - MINIO_ROOT_PASSWORD=minioadmin
  #     - AZURE_SPEECH_KEY=${AZURE_SPEECH_KEY}
  #     - AZURE_SERVICE_REGION=${AZURE_SERVICE_REGION}
  #   volumes:
  #     - .:/app
  #     - /app/node_modules
  #   depends_on:
  #     rabbitmq:
  #       condition: service_healthy
  #     minio:
  #       condition: service_healthy
  #   networks:
  #     - agent_qc_network

  # conversation-analyzer:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   container_name: agent_qc_conversation_analyzer
  #   command: npm run worker:conversation-analyzer
  #   environment:
  #     - NODE_ENV=local
  #     - RABBITMQ_HOST=rabbitmq
  #     - RABBITMQ_PORT=5672
  #     - RABBITMQ_USER=${RABBITMQ_USER:-rabbitmq}
  #     - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD:-rabbitmq}
  #     - MINIO_ENDPOINT=minio
  #     - MINIO_PORT=9000
  #     - MINIO_USE_SSL=false
  #     - MINIO_ROOT_USER=minioadmin
  #     - MINIO_ROOT_PASSWORD=minioadmin
  #     - OPENAI_API_KEY=${OPENAI_API_KEY}
  #   volumes:
  #     - .:/app
  #     - /app/node_modules
  #   depends_on:
  #     rabbitmq:
  #       condition: service_healthy
  #     minio:
  #       condition: service_healthy
  #   networks:
  #     - agent_qc_network

  postgres:
    image: postgres:15-alpine
    container_name: agent_qc_postgres
    environment:
      POSTGRES_USER: ${DATABASE_USER:-postgres}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-postgres}
      POSTGRES_DB: ${DATABASE_NAME:-agent_qc_postgres}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - agent_qc_network

  redis:
    image: redis:7-alpine
    container_name: agent_qc_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - agent_qc_network

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: agent_qc_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-rabbitmq}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-rabbitmq}
    ports:
      - "5672:5672"   # AMQP protocol port
      - "15672:15672" # Management UI port
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - agent_qc_network

  minio:
    image: quay.io/minio/minio
    container_name: minio
    ports:
      - "9000:9000"  # S3 API
      - "9001:9001"  # Web UI
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    restart: unless-stopped
    networks:
      - agent_qc_network

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  minio-data:

networks:
  agent_qc_network:
    driver: bridge 